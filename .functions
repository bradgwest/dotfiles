#!/bin/bash

create-pkcs8-key() {
  openssl genrsa -out $1.pem 4096
  openssl rsa -in $1.pem -pubout -out $1-pub.pem
  openssl pkcs8 -topk8 -inform PEM -outform PEM -nocrypt -in $1.pem -out $1-pkcs8.pem
}

# Reading list
add-to-reading() {
    echo $1 >> ~/reading.md
}

# Git
clone () {
  git fetch origin pull/$1/head:pr_$1
  git checkout pr_$1
}

gfpr () {
  git fetch origin pull/$1/head:PR-$1
  git checkout PR-$1
}

# Git - Clone a PR so that you can add commits and push to it
# $1 -- fork to pull from, like https://github.com/bradwest-wk/dataflow_catapult.git or ssh equivalent
# $2 -- branch name, like ANSER-8765
clone-to-contribute () {
  REMOTE_ALIAS=$(echo $1 | perl -ne 'print "$&\n" if /(?<=github.com[\/:])[a-z\-]+/')
  git remote add $REMOTE_ALIAS $1 || true
  git fetch $REMOTE_ALIAS
  git checkout -b $2 $REMOTE_ALIAS/$2
  echo "Make changes and run 'git push $REMOTE_ALIAS $2' to update the PR"
}

# ISO08061 UTC timestamp
timestamp() {
  date -u +"%Y-%m-%dT%H:%M:%SZ"
}

# Write a notes taker
note() {
  # if $NOTES doesn't exist, then error
  if [ -z "${NOTES}" ]; then
    echo "Please set NOTES env variable"
    exit 1
  fi

  if ! (($#)); then
    # no args, tail
    tail $NOTES
  else
    # add all args to the file
    printf "$(timestamp) %s\n" "$*" >> $NOTES
  fi
}

# cd and ls in one
cl() {
  local dir="$1"
  local dir="${dir:=$HOME}"
  if [[ -d "$dir" ]]; then
    cd "$dir" >/dev/null; ls
  else
    echo "bash: cl: $dir: Directory not found"
  fi
}

# calculator
calc() {
    echo "scale=3;$@" | bc -l
}

# Take a TODO note in cwd
todo() {
    local dir="${PWD}/.todo"
    if [[ -z "$dir" ]]; then
        touch "$dir"
    fi

    if ! (($#)); then
        cat "$dir"
    else
        printf "$(timestamp) %s\n" "$*" >> "$dir"
    fi
}

# delete a line from $HISTFILE. If no arg is passed, then it deletes the
# previous command, otherwise it attempts to match the args to a line
forget() {
  if ! (($#)); then
    # no args, delete previous
    history -d $(expr $(history | tail -n 1 | grep -oP '^\s+\d+') - 1);
  else
    # implement me
    echo Not Implemented
  fi
}

# Create python3 venv in ./.venv
# $1 - path to python binary
# $2 - name of virtualenv
create-venv () {
  if [[ $# -ne 2 ]]; then
    echo "Must pass 2 parameters, (1) python binary and (2) name of venv"
    exit 1
  fi
  $1 -m venv $PWD/.venv/$2
  source $PWD/.venv/$2/bin/activate
  pip install wheel
}

# Activate a virtual env
# $1 path to venv, within .venv directory
venv () {
  local usage="Usage: venv <virtualenv>"

  if [[ -d venv ]]; then
    . venv/bin/activate
    return 0
  fi

  if [[ ! -d .venv ]]; then
    echo "ERROR: .venv/ directory does not exist"
    return 1
  fi

  if [[ $# > 1 ]]; then
    echo "Too many args:\n$usage"
    return 1
  fi

  local subdirs=$(ls -d -- .venv/*/ | xargs basename)

  if [[ $# -eq 0 && $(echo $subdirs | wc -w) -ne 1 ]]; then
    echo "Virtualenvs in directory:\n$subdirs"
    return 0
  fi

  local venvpath=.venv/

  if [[ $# -eq 1 ]]; then
    venvpath+=$(echo $1 | sed 's/ *$//g')
  else
    venvpath+=$subdirs
  fi

  . ${venvpath}/bin/activate
}

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fda - including hidden directories
fda() {
  local dir
  dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

# opr - Open a PR
opr() {
        org=$(git config --get remote.origin.url | sed -e 's,.*:\(.*\)/.*,\1,')
        repo=$(git config --get remote.origin.url | sed -e 's,.*/\(.*\)\..*,\1,')
        branch=$(git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
        open "https://github.com/${org}/${repo}/compare/${branch}?expand=1"
}

